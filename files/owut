#!/usr/bin/ucode -S
// owut - OpenWrt Upgrade Tool
// Copyright (c) 2024 Eric Fahlgren <eric.fahlgren@gmail.com>
// SPDX-License-Identifier: GPL-2.0-only
// vim: set noexpandtab softtabstop=8 shiftwidth=8 syntax=javascript:
//------------------------------------------------------------------------------

let VERSION = "%%VERSION%%";

// There's no ubus module doc yet, so dig through
// https://github.com/jow-/ucode/blob/master/lib/ubus.c#L1973

const uloop   = require("uloop");
const uclient = require("uclient");

import * as fs       from "fs";
import * as mod_ubus from "ubus";
import * as ap       from "utils.argparse";
import { cursor }    from "uci";
let uci = cursor();

const default_sysupgrade = "https://sysupgrade.openwrt.org";
const default_upstream   = "https://downloads.openwrt.org";

//------------------------------------------------------------------------------

const Logger = {
	_level: 0,
	set_level: function(lvl) { this._level = lvl; },

	GREEN:  "0;255;0",
	YELLOW: "255;234;0",
	RED:    "255;0;0",

	color: function(color_name)
	{
		// TODO suppress colorization when stdout is a pipe
		return color_name == "reset" ? "\033[m" : `\033[38;2;${color_name}m`;
	},

	colorize: function(color_name, text)
	{
		return this.color(color_name) + text + this.color("reset");
	},

	_out: function(prefix, clr, fmt, ...args)
	{
		printf("%s: ", this.colorize(clr, prefix));
		printf(fmt, ...args);
	},

	err: function(fmt, ...args) { this._out("ERROR",   this.RED,    fmt, ...args); },
	wrn: function(fmt, ...args) { this._out("WARNING", this.YELLOW, fmt, ...args); },

	log: function(level, fmt, ...args)
	{
		if (this._level >= level) printf(fmt, ...args);
	},
};

let L = Logger;

function _exit(status)
{
	fs.stdout.flush();
	fs.stderr.flush();
	exit(status);
}

//------------------------------------------------------------------------------

let commands = {
	check:    { help: "Collect all resources and report stats." },
	list:     { help: "Show all the packages installed by user." },
	blob:     { help: "Display the json blob for the ASU build request." },
	download: { help: "Build, download and verify an image." },
	verify:   { help: "Verify the downloaded image." },
	install:  { help: "Install the specified local image." },
	upgrade:  { help: "Build, download, verify and install an image." },

	versions: { help: "Show available versions." },
	dump:     { help: "Collect all resources and dump internal data structures." },
};

let _fstypes   = ["squashfs", "ext4", "ubifs", "jffs2"];
let _fslo      = 1;  // See https://sysupgrade.openwrt.org/ui/#model-BuildRequest
let _fshi      = 1024;
let _list_fmts = ["fs-user", "fs-all", "config"];

let arg_defs = proto([
	ap.DEFAULT_HELP,
	ap.DEFAULT_VERSION,
	{ name: "command",     position: 0, one_of: commands,      action: "store",                               help: "Sub-command to execute" },
	{ name: "version",     short: "-V", long: "--version-to",  action: "store",     nargs: 1, default: null,  help: "Specify the target version, defaults to installed version." },
	{ name: "verbosity",   short: "-v", long: "--verbose",     action: "inc",                 default: 0,     help: "Print various diagnostics.  Repeat for even more output." },
	{ name: "keep",        short: "-k", long: "--keep",        action: "set",                 default: false, help: "Save all downloaded working files." },
	{ name: "force",                    long: "--force",       action: "set",                 default: false, help: "Force download when there are no changes detected." },
	{ name: "add",         short: "-a", long: "--add",         action: "store",     nargs: 1,                 help: "Comma-separated list of new packages to add to build list." },
	{ name: "remove",      short: "-r", long: "--remove",      action: "store",     nargs: 1,                 help: "Comma-separated list of installed packages to remove from build list." },
	{ name: "init_script", short: "-I", long: "--init-script", action: "store",     nargs: 1, default: null,  help: "Path to uci-defaults script to run on first boot ('-' use stdin)." },
	{ name: "fstype",      short: "-F", long: "--fstype",      action: "enum",      nargs: 1, default: null, one_of: _fstypes, help: `Desired root file system type (${join(", ", _fstypes)}).` },
	{ name: "rootfs_size", short: "-S", long: "--rootfs-size", action: "store_int", nargs: 1, default: null, lower: _fslo, upper: _fshi, help: `Root file system size in MB (${_fslo}-${_fshi}).` },
	{ name: "image",       short: "-i", long: "--image",       action: "store",     nargs: 1, default: "/tmp/firmware.bin", help: "Image name for download, verify, install and upgrade." },
	{ name: "format",      short: "-f", long: "--format",      action: "enum",      nargs: 1, default: null, one_of: _list_fmts, help: `Format for 'list' output (${join(", ", _list_fmts)}).` },
], ap.ArgParser);

arg_defs.set_prog_info(`owut - OpenWrt Upgrade Tool version ${VERSION} (${sourcepath()})`);
arg_defs.set_bookends(
	"\nowut is an upgrade tool for OpenWrt.\n",
	"\nThank you!  Come again!\n"
);

let options = arg_defs.parse(null, {owut: "owut"});

L.set_level(options.verbosity);

//------------------------------------------------------------------------------

let ubus;
let url;      // See initialize_urls
let build;    // See collect_all for next three
let device; 
let release;


// Temporary and resource files.
// We save them all with reasonably recognizable names to aid in debugging.
let tmp_root = "/tmp/owut-";
let img_root = match(options.image, /(.*\/|)[^\.]*/)[0];
let tmp = {
	bom_json:           `${tmp_root}bom.json`,
	overview_json:      `${tmp_root}overview.json`,
	versions_json:      `${tmp_root}versions.json`,
	pkg_arch_json:      `${tmp_root}packages-arch.json`,
	pkg_platform_json:  `${tmp_root}packages-plat.json`,
	platform_json:      `${tmp_root}platform.json`,

	failed_html:        `${tmp_root}failures`,

	req_json:           `${tmp_root}build-request.json`,   // The POST body we send.
	build_json:         `${tmp_root}build-response.json`,  // First response.
	build_status_json:  `${tmp_root}build-status.json`,    // Overwritten subsequent responses.
	rsp_header:         `${tmp_root}rsp-header.txt`,

	firmware_sums:      `${img_root}.sha256sums`,          // Expected sha256sums from downloaded firmware.
	firmware_man:       `${img_root}-manifest.json`,       // Manifest of successful build.
};


let packageDB = {};      // Dictionary of installed packages and much status.

let packages = {  // Dictionary of package lists.
	// Collected from this device.
	installed: {}, // All the name:version pairs.
	top_level: [], // Simple list of names.

	// Collected from upgrade servers based on to-version.
	default:   [], // Another simple name list.
        available: {}, // The name:version pairs that are available for installation.
	changes:   {}, // Changes extracted from overview; structure documented in apply_pkg_mods.
};

//------------------------------------------------------------------------------

function _run(command, params)
{
	let prog = {
		command: command,
		params:  params,
	};
	return ubus.call("file", "exec", prog);
}

//------------------------------------------------------------------------------

let sha256 = {
	save: function(sum) {
		// Create the checksum file from the image name and expected sum.
		let sums = fs.open(tmp.firmware_sums, "w");
		if (sums) {
			sums.write(sprintf("%s  %s\n", sum, options.image));
			sums.close();
		}
	},

	saved_sum: function() {
		// Our saved sums is always just a single line
		let sums = fs.open(tmp.firmware_sums, "r");
		if (sums) {
			let line = split(trim(sums.read("line")), /\s+/);
			sums.close();
			if (line[1] == options.image)
				return line[0];
			L.err("invalid image '%s', but expected '%s' in sum file\n", line[1], options.image);
		}
		return null;
	},

	sum: function(file) {
		// Return the checksum for the specified file.
		let data = _run("/bin/busybox", [ "sha256sum", file ]);
		return data?.code == 0 ? substr(data.stdout, 0, 64) : null;
	},

	verify: function() {
		// Run validation against the saved checksums.
		return _run("/bin/busybox", [ "sha256sum", "-c", tmp.firmware_sums ]);
	},

};

//------------------------------------------------------------------------------

function sysupgrade(file, options)
{
	let params = options ? [...options, file] : [file];
	return _run("sysupgrade", params);
}

//------------------------------------------------------------------------------

function _request(url, dst_file, msg, json_blob)
{
	//  uclient function for simple http requests
	//   url       = self explanatory
	//   dst_file  = result of request
	//   msg       = error message if request fails
	//   json_blob = optional POST data, GET used if null

	let uc;
	let rsp_status;
	let rsp_headers;

	let output = fs.open(dst_file, "w");
	if (! output) {
		L.err("%s\nCould not write: %s\n", msg, dst_file);
		return null;
	}

	uc = uclient.new(url, null, {
		header_done: (cb) => {
			rsp_status  = uc.status();

			rsp_headers = uc.get_headers();
			rsp_headers["status"] = rsp_status.status;
			if (options.keep) {
				let hdrs = fs.open(tmp.rsp_header, "w");
				hdrs.write(sprintf("%.J\n", rsp_headers));
				hdrs.close();
			}
		},

		data_read: (cb) => {
			let data;
			while (length(data = uc.read()) > 0) {
				output.write(data);
			}
		},

		data_eof: (cb) => {
			output.close();
			uloop.end();
		},

		error: (cb, code) => {
			L.err("%s\n", code);
			uloop.end();
		},
	});

	if (! uc.ssl_init({verify: false})) {
		L.err("%s\nFailed to initialize SSL\n", msg);
		return null;
	}

	if (! uc.connect()) {
		L.err("%s\nFailed to connect\n", msg);
		return null;
	}

	let type = "GET";
	let headers = {
		"User-Agent": "owut/" + VERSION,
	};
	let args = {
		headers: headers,
	};

	if (json_blob) {
		type = "POST";
		headers["Content-Type"] = "application/json";
		args["post_data"] = json_blob;
	}

	if (! uc.request(type, args)) {
		L.err("%s\nFailed to send request\n", msg);
		return null;
	}
	uloop.run();

	L.log(1, "Downloaded %s to %s\n", url, dst_file);
	L.log(2, "Response headers = %.4J\n", rsp_headers);

	return rsp_status;
}

function read_tmp_file(file)
{
	// Reads 'file', then optionally deletes it.
	// Return raw text.

	let fd = fs.open(file, "r");
	let tx = fd.read("all");
	fd.close();
	if (! options.keep) {
		fs.unlink(file);
	}
	return tx;
}

function read_tmp_json(file)
{
	// Read 'file' into a json object, then optionally delete the file.
	// Primarily used to parse downloads from /tmp.

	return json(read_tmp_file(file));
}

//------------------------------------------------------------------------------
//-- Source-specific downloaders -----------------------------------------------

function dl_platform()
{
	// Get the starting point for the target build.

	let msg = "Could not download platform json.";
	let rsp = _request(url.platform, tmp.platform_json, msg);
	if (rsp?.status == 200) {
		return read_tmp_json(tmp.platform_json);
	}
	return null;
}

function dl_overview()
{
	// Overview is the collection of information about the branches and their releases.
	//
	// Note that auc uses branches.json instead.  Its content is all included
	// in overview.json at '$.branches', but we like overview as it has a few
	// more useful items.  It can be found at:
	//     $url.api_root/branches.json

	let msg = `could not download '${url.overview}', aborting.`;
	let rsp = _request(url.overview, tmp.overview_json, msg);
	if (rsp?.status == 200) {
		return read_tmp_json(tmp.overview_json);
	}
	L.log(0, "Response status: %s\n", rsp?.status);
	L.err("%s\n", msg);
	_exit(1);
}

function dl_versions()
{
	// The upstream .versions file containing all the current versions.
	let msg = "Could not download versions json.";
	let rsp = _request(url.versions, tmp.versions_json, msg);
	if (rsp?.status == 200) {
		return read_tmp_json(tmp.versions_json);
	}
	return null;
}

function dl_bom()
{
	// Download the platform BOM.

	let msg = `could not access BOM for ${build.to.version}, kernel version cannot be determined`;
	let rsp = _request(url.bom, tmp.bom_json, msg);
	if (rsp?.status == 200) {
		return read_tmp_json(tmp.bom_json);
	}
	return null;
}

function dl_failures(feed)
{
	// The build failures info is html that resides in odd, one-man-out URL
	// locations:
	//     https://downloads.openwrt.org/snapshots/faillogs/mipsel_24kc/<feed>/
	//     https://downloads.openwrt.org/releases/faillogs-23.05/mipsel_24kc/<feed>/

	let uri = feed ? `${url.failed}${feed}/` : url.failed;
	let htm = `${tmp.failed_html}-${feed ? feed : "feeds"}.html`;

	let msg = "checking build failures";
	let rsp = _request(uri, htm, msg);
	if (rsp?.status == 200) {
		return read_tmp_file(htm);
	}
	return null;
}

function dl_package_versions()
{
	// Downloads and consolidates the two sources of package versions into
	// a single object.

	let msg = "could not download package list to determine versions";
	let rsp = _request(url.pkg_arch, tmp.pkg_arch_json, msg);
	if (rsp?.status != 200) return null;
	rsp = _request(url.pkg_plat, tmp.pkg_platform_json, msg);
	if (rsp?.status != 200) return null;

	return {
		...read_tmp_json(tmp.pkg_arch_json),
		...read_tmp_json(tmp.pkg_platform_json).packages,
	};
}

function dl_build(config)
{
	if (options.keep) {
		L.log(1, "Saving build blob to %s\n", tmp.req_json);
		let save = fs.open(tmp.req_json, "w");
		if (save) {
			save.write(config);
			save.close();
		}
	}

	let msg = "failed to initiate build";
	let rsp = _request(url.build, tmp.build_json, msg, config);
	if (rsp) {
		return read_tmp_json(tmp.build_json);
	}
	return null;
}

function dl_build_status()
{
	// The response is considered valid even if status != 200, as this is the
	// ongoing status query.  See switch cases in 'download' function.

	let msg = "failed to get build status response";
	if (_request(url.build_status, tmp.build_status_json, msg)) {
		return read_tmp_json(tmp.build_status_json);
	}
	return null;
}

//------------------------------------------------------------------------------

function numstr(s) {
	// Attempt conversion, if NaN return original string.
	let n = int(s);
	return n == n ? n : s;
}

const ver_bits = regexp('[^a-z0-9]', 'i');
function pkg_ver_cmp(old, new)
{
	let v1 = split(lc(old), ver_bits);
	let v2 = split(lc(new), ver_bits);
	for (let i, n1 in v1) {
		let n2 = v2[i];
		if (n1 != n2) {
			n1 = numstr(n1);
			n2 = numstr(n2);
			if (n1 < n2) return -1;
			if (n1 > n2) return  1;
		}
	}
	return 0;
}

function pkg_ver_older(v1, v2)
{
	// Is v1 and older version than v2?
	return pkg_ver_cmp(v1, v2) < 0;
}

function version_cmp(v1, v2)
{
	// Compare two versions and return cmp value based on their relative
	// ordering.  We want to make sure RCs are before any release, and
	// SNAPSHOTs are after, hence the string mangling.

	v1 = replace(v1, '-SNAP', '.99');
	v1 = replace(v1, 'SNAP',  '99');
	v2 = replace(v2, '-SNAP', '.99');
	v2 = replace(v2, 'SNAP',  '99');
	return pkg_ver_cmp(v1, v2);
}

function version_older(new_version, base_version)
{
	// Use version_cmp to see if new_version < base_version.  Useful to detect
	// if the user is attempting to downgrade their installation.
	//
	//  version_older('23.05.2', 'SNAPSHOT') -> true

	return version_cmp(new_version, base_version) < 0;
}

function branch_of(version)
{
	// Extract and return the branch for a given version.
	//   SNAPSHOT       -> SNAPSHOT
	//   23.05.0-rc1    -> 23.05
	//   23.05.3        -> 23.05
	//   23.05-SNAPSHOT -> 23.05
	if (version == "SNAPSHOT") return "SNAPSHOT";
	let m = match(version, /\d+\.\d+/);
	return m ? m[0] : "";
}

//------------------------------------------------------------------------------
//-- Package management --------------------------------------------------------

function is_installed(pkg)
{
	return pkg in packageDB;
}

function is_default(pkg)
{
	// Return status if package is in the defaults for this device, i.e., it
	// will be present as part of the standard install.

	// Don't attempt to do the following, because we care about things that
	// may not be installed, e.g., 'dnsmasq' replaced by 'dnsmasq-full'.
	//   return pkg in packageDB && packageDB[pkg].default;

	return pkg in packages.default;
}

function is_top_level(pkg)
{
	// We only check in the installed packages.
	return is_installed(pkg) && packageDB[pkg].top_level;
}

function is_available(pkg)
{
	// Search for a given package in the combined platform/arch package list.
	return pkg in packages.available;
}

//------------------------------------------------------------------------------

const SrcType = {
	ALL:          0,
	USER_ONLY:    1,
	DEFAULT_ONLY: 2,
};

function top_level(src_type)
{
	// Return only the installed top level packages, i.e., those upon which
	// no other package depends.  'src_type' specifies how the top-level list
	// is to be filtered.

	let tl;
	switch (src_type) {
		case SrcType.ALL:
			tl = is_top_level;
			break;

		case SrcType.DEFAULT_ONLY:
			tl = (pkg) => is_top_level(pkg) && is_default(pkg);
			break;

		case SrcType.USER_ONLY:
			tl = (pkg) => is_top_level(pkg) && ! is_default(pkg);
			break;
	}
	return filter(keys(packageDB), tl);
}

function removed_defaults()
{
	// Return the list of default packages that have been removed.
	return filter(packages.default, (p) => ! is_installed(p));
}

function add_package(pkg)
{
	if (is_installed(pkg)) {
		return true;
	}
	if (! is_available(pkg)) {
		L.err("package '%s' is not available on this platform\n", pkg);
		return false;
	}

	packageDB[pkg] = {
		version:     null,
		new_version: packages.available[pkg],
		top_level:   true,
		default:     is_default(pkg),
	};
	return true;
}

function remove_package(pkg)
{
	// pkg - the package to remove, if possible.

	if (is_installed(pkg)) {
		if (! is_top_level(pkg)) {
			L.wrn("package '%s' has dependents and removal will have no effect on the build\n", pkg);
		}
		else if (is_default(pkg)) {
			L.wrn("package '%s' is a default package, removal may have unknown side effects\n", pkg);
		}
		delete packageDB[pkg];
		return true;
	}
	return false;
}

function replace_package(old_pkg, new_pkg)
{
	// Do optional replacements.  If 'old_pkg' is not installed, then we
	// have nothing to do but report success.

	if (is_installed(old_pkg)) {
		remove_package(old_pkg);
		return add_package(new_pkg);
	}
	return true;
}

//------------------------------------------------------------------------------

function collect_defaults(board, device)
{
	// Use both board json for its defaults, then add the device-specific
	// defaults to make one big defaults list.

	packages.default = ["kernel"];
	push(packages.default, ...board);
	push(packages.default, ...device);
	packages.default = sort(packages.default);
}

function apply_pkg_mods()
{
	// 1) Handle 'overview.package_changes'.
	// 2) Apply user-specified removals.
	// 3) Apply user-specified additions.
	//
	// Package names in changes are already in canonical form.
	// changes = [
	//   {
	//     source:    "name-from",  // Required string - name of package in target version
	//     target:    "name-to",    // Optional string - if present, name of replaced package in installed version
	//     revision:  123,          // Required int - revision at which package change was introduced
	//     mandatory: false,        // Optional bool - if true, then force add/remove of target/source, respectively
	//   },
	//   ...
	// ];
	//
	// For a case of simple removal, see 'kmod-nft-nat6', which was merged
	// into 'kmod-nft-nat' in rev 19160.

	let errors = 0;

	// TODO think about downgrades, i.e., when to.rev_num < from.rev_num...
	let rev_num = build.to.rev_num();
	for (let chg in packages.changes) {
		if (chg.revision <= rev_num) {
			if (chg.target) {
				if (! replace_package(chg.source, chg.target)) {
					errors++;
				}
			}
			else if (is_installed(chg.source)) {
				// No target, only source, so remove it.
				if (! remove_package(chg.source)) {
					errors++;
				}
			}
		}
	}

	// Do removals first, so any conflicts are suppressed.
	for (let pkg in split(options.remove, ",")) {
		if (! remove_package(pkg)) {
			errors++;
		}
	}
	for (let pkg in split(options.add, ",")) {
		if (! add_package(pkg)) {
			errors++;
		}
	}
	
	return errors == 0;
}

function collect_packages()
{
	// Using data from rpc-sys packagelist, build an object containing all
	// installed package data.
	//
	//     packageDB = {
	//         "pkg1": {
	//             version:     "version-string",
	//             new_version: "version-string",
	//             top_level:   bool,
	//             default:     bool,
	//         },
	//         "pkg2": {
	//             ...
	//         },
	//     };

	let installed = ubus.call("rpc-sys", "packagelist", { "all": true });
	packages.installed = sort(installed.packages);

	let top_level = ubus.call("rpc-sys", "packagelist", { "all": false });
	delete top_level.packages["kernel"]; // Not sure how they get here...
	delete top_level.packages["libc"];
	packages.top_level = sort(keys(top_level.packages));

	packages.available = dl_package_versions() ?? {};  // Might be null in ancient versions.

	for (let pkg, ver in packages.installed) {
		packageDB[pkg] = {
			version:     ver,
			new_version: packages.available[pkg],
			top_level:   pkg in packages.top_level,
			default:     is_default(pkg),
		};
	}

	if (! apply_pkg_mods()) {
		L.err("Errors collecting package data, terminating...\n");
		_exit(1);
	}

	packageDB = sort(packageDB);
}

//------------------------------------------------------------------------------

function initialize_urls()
{
	let sysupgrade = uci.get_first("attendedsysupgrade", "server", "url") ?? default_sysupgrade;

	let api        = sysupgrade + "/api/v1";
	let build      = api + "/build";
	let status     = build + "/<hash>";
	let static     = sysupgrade + "/json/v1";
	let store      = sysupgrade + "/store";
	let overview   = static + "/overview.json";

	url = {
		sysupgrade_root: sysupgrade, // sysupgrade server base url
		api_root:        api,        // api for builds and other dynamic requests
		build:           build,      // build request
		build_status:    status,     // build status, same as build appended with hash
		static_root:     static,     // json static api root url
		store_root:      store,      // api database directory for build results
		platform:        null,       // release platform json
		overview:        overview,   // Top-level overview.json, contains branch info
		versions:        null,       // Current versions from upstream buildbot
		pkg_arch:        null,       // Generic arch package list, containing most of the items
		pkg_plat:        null,       // Platform packages, built specifically for this platform

		upstream:        null,       // upstream build server base url, from overview.json
		download:        null,       // upstream with directory at which the "to" build can be found
		bom:             null,       // BOM for target build
		failed:          null,       // Failure list html
	};
}

function show_versions(check_version_to)
{
	// Using the ASU overview to get all the available versions, scan that
	// for version-to and report.

	L.log(0, "Available 'version-to' values:\n");

	let branches  = release.branches;
	let installed = build.from.version;
	let selected  = build.to?.version ?? options.version;
	let found_to  = false;

	for (let branch, details in branches) {
		L.log(0, "  %s %s branch\n", branch, branch == "SNAPSHOT" ? "main" : "release");
		for (let version in details.versions) {
			let suffix = [];
			if (version == details.latest) push(suffix, "latest");
			if (version == installed     ) push(suffix, "installed");
			if (version == selected      ) {
				push(suffix, "requested");
				found_to = true;
			}
			suffix = length(suffix) == 0 ? "" : " (" + join(",", suffix) + ")";
			L.log(0, "    %s%s\n", version, suffix);
		}
	}

	if (! found_to)
		L.log(0, "\nYour specified version-to '%s' is not available.  " +
			 "Pick one from above.\n", selected);
	else if (check_version_to)
		L.log(0, "\nYour version-to '%s' appears valid, so either:\n" +
			 "  1) This build has been removed from the server, or\n" +
			 "  2) The ASU server is having issues.\n", selected);
}

//------------------------------------------------------------------------------

const BuildInfo = {
	is_snapshot: function() {
		return this.version == "SNAPSHOT";
	},

	is_rel_snapshot: function() {
		return match(this.version, /.*-SNAPSHOT/) != null;
	},

	is_downgrade_from: function(from) {
		if (version_older(this.version, from.version))
			return true;
		// Same or newer version, so check revision number.
		return this.rev_num() < from.rev_num();
	},

	rev_num: function() {
		// Extracts the revision number from the revision code:
		//     "r23630-842932a63d" -> 23630
		let m = match(this.rev_code, /r(\d*)-(.*)/);
		return m ? int(m[1]) : 0;
	},
};

function collect_device_info()
{
	let sysb = ubus.call("system", "board");

	let target   = sysb.release.target;
	let platform = sysb.board_name;
	let ver_from = sysb.release.version;
	let sutype; // Sysupgrade type: combined, combined-efi, sdcard or sysupgrade

	// See also, auc.c:1657 'select_image' for changing installed fstype to requested one.
	// Wait, is there also "factory"??? See asu/build.py abt line 246
	if (match(target, /x86\//)) {  // This might be wrong, what about x86/geode - geos?
		platform = "generic";
		sutype   = "combined";
	}
	else {
		// Could be that sutype = "sdcard" for some devices, but
		// assume it is "sysupgrade", which might be wrong.  We'll
		// fix this after we get the profiles for the device, see
		// 'collect_all'.
		platform = replace(platform, /,/, "_");
		sutype   = "sysupgrade";
	}

	if (fs.access("/sys/firmware/efi")) {
		// All x86, maybe new armsr, too.
		sutype = `${sutype}-efi`;
	}

	device = {
		arch:     null,              // "x86_64" or "mipsel_24kc"   or "aarch64_cortex-a53", contained in platform_json
		target:   target,            // "x86/64" or "ath79/generic" or "mediatek/mt7622", from system board
		platform: platform,          // "generic" (for x86) or "tplink,archer-c7-v4" or "linksys,e8450-ubi"
		fstype:   sysb.rootfs_type,  // "ext4" or "squashfs", what is actually present now
		sutype:   sutype,            // Sysupgrade type, combined, combined-efi or sysupgrade or sdcard
	};

	build = {
		from: proto({
			version:    ver_from,               // Full version name currently installed: "SNAPSHOT" or "22.03.1"
			rev_code:   sysb.release.revision,  // Kernel version that is currently running
			kver:       sysb.kernel,            // Current build on device
		}, BuildInfo)
	};
}

function collect_build_info()
{
	let ver_to = options.version ? uc(options.version) : null;
	if (ver_to) {
		if (index(ver_to, "RC") > 0) ver_to = lc(ver_to);

		if (ver_to in release.branches) {
			// User specified a branch name, not a specific version,
			// so coerce to latest in that branch.
			ver_to = release.branches[ver_to].latest;
		}
	}
	else if (index(build.from.version, "SNAPSHOT") >= 0)
		// Any snapshot stays on the same branch.
		ver_to = build.from.version;
	else {
		// Any unspecified non-snapshot gets latest from same branch.
		let b = branch_of(build.from.version);
		ver_to = release.branches[b].latest;
	}

	let ver_to_branch = branch_of(ver_to);
	if (! (ver_to_branch in release.branches) ||
	    ! (ver_to        in release.branches[ver_to_branch].versions)) {
		show_versions(true);
		_exit(1);
	}

	let fstype = options.fstype ?? device.fstype;
	build.to = proto({
		version:    ver_to,  // Full version name of target: "22.03.0-rc4", "23.05.2" or "SNAPSHOT"
		rev_code:   null,    // Build number from target
		kver:       null,    // Kernel version of target build, extracted from BOM
		fstype:     fstype,  // Requested root FS type
		img_prefix: null,    // Prefix of image being built
		img_file:   null,    // Full image name to download and install
		date:       null,    // Build date of target
	}, BuildInfo);
}

function complete_build_info(profile, board)
{
	let dt = gmtime(board.source_date_epoch);
	build.to.date       = sprintf("%4d-%02d-%02dT%02d:%02d:%02dZ", dt.year, dt.mon, dt.mday, dt.hour, dt.min, dt.sec);
	build.to.rev_code   = board.version_code;
	build.to.img_prefix = profile.image_prefix;

	let valid_fstypes = uniq(sort(map(profile.images, (img) => img.filesystem)));
	if (! (build.to.fstype in valid_fstypes)) {
		L.err("file system type '%s' should be one of %s\n", build.to.fstype, valid_fstypes);
		_exit(1);
	}

	// Here is where we fix our guess for 'sutype' made above in
	// 'collect_device_info' (look for "sdcard" there).
	let valid_sutypes = uniq(sort(map(profile.images, (img) => img.type)));
	if (! (device.sutype in valid_sutypes)) {
		if (device.sutype == "sysupgrade" && "sdcard" in valid_sutypes) {
			device.sutype = "sdcard";
		}
		else {
			L.err("sysupgrade type '%s' should be one of %s\n", device.sutype, valid_sutypes);
			_exit(1);
		}
	}

	for (let img in profile.images) {
		if (img.filesystem == build.to.fstype && img.type == device.sutype) {
			build.to.img_file = img.name;
			break;
		}
	}
}

function collect_overview()
{
	collect_device_info();

	let overview = dl_overview();
	url.upstream = overview.upstream_url ?? default_upstream;
	url.versions = `${url.upstream}/.versions.json`;

	release = {
		branch:   null, // Release branch name: "SNAPSHOT" or "21.07" or "23.05"
		dir:      null, // ASU and DL server release branch directory: "snapshots" or "release/23.05.0"
		branches: {},
	};

	for (let branch_id, data in overview.branches) {
		release.branches[branch_id] = {
			latest:   null,  // Determined below.
			versions: data.versions,
		};
	}

	let bad_releases = [ "23.05.1", ];

	let versions = dl_versions();
	for (let version in versions.versions_list) {
		if (version in bad_releases) continue;
		// Ignore old branches that aren't present in overview.
		let branch_id = branch_of(version);

// see discussion in issue#2
//		if (options.legacy && ! (branch_id in release.branches)) {
//			release.branches[branch_id] = {
//				latest:   null,
//				versions: [],
//			};
//		}

		let working_branch = release.branches[branch_id];
		if (working_branch && ! (version in working_branch.versions)) {
			push(working_branch.versions, version);
		}
	}

	// Put everything in order, select 'latest'...
	release.branches = sort(release.branches, version_cmp);
	for (let data in values(release.branches)) {
		data.versions = sort(data.versions, version_cmp);
		for (let version in data.versions) {
			if (index(version, "-SNAPSHOT") >= 0) continue;
			if (data.latest == null || version_older(data.latest, version)) {
				data.latest = version;
			}
		}
	}

	collect_build_info();

	release.branch = branch_of(build.to.version);
	let active_branch = overview.branches[release.branch];
	if (! active_branch) {
		// TODO Should probably check:
		//    || ! (build.to.version in release.branches[release.branch].versions)
		// but the versions list we got from the overview is incomplete
		// (i.e., ASU server will build a lot more than is shown) and
		// we catch that when trying to fetch board_json below.
		show_versions(true);
		_exit(1);
	}

	release.dir      = replace(active_branch.path, "{version}", build.to.version);
	packages.changes = active_branch.package_changes;
}

function collect_platform()
{
	// ASU platform.json often updates days after upstream profiles, so the
	// 'version_code' is wrong and build requests fail.  As of 2024-06-09,
	// this appears to have been solved, see ASU commit 1e6484d.
	//
	// Previously, to solve this issue we'd look at the download server:
	//   url.platform = `${url.upstream}/${release.dir}/targets/${device.target}/profiles.json`;
	//   let profile = platform.profiles[device.platform];

	url.platform = `${url.static_root}/${release.dir}/targets/${device.target}/${device.platform}.json`;

	let platform = dl_platform();
	if (! platform) {
		show_versions(true);
		_exit(1);
	}

	let profile = platform;
	device.arch = platform.arch_packages;

	complete_build_info(profile, platform);
	collect_defaults(platform.default_packages, profile.device_packages);
}

function collect_all()
{
	collect_overview();
	collect_platform();

	let location = build.to.is_snapshot()
		     ? "snapshots/faillogs"
		     : `releases/faillogs-${release.branch}`;
	url.failed   = `${url.upstream}/${location}/${device.arch}/`;

	url.pkg_arch = `${url.static_root}/${release.dir}/packages/${device.arch}-index.json`;
	url.pkg_plat = `${url.static_root}/${release.dir}/targets/${device.target}/index.json`;

	let prefix   = "openwrt-";
	let starget  = replace(device.target, /\//, "-");
	if (! build.to.is_snapshot())    prefix = `${prefix}${build.to.version}-`;
	if (build.to.is_rel_snapshot())  prefix = lc(`${prefix}${build.to.rev_code}-`);

	url.download = `${url.upstream}/${release.dir}/targets/${device.target}`;
	url.bom      = `${url.download}/${prefix}${starget}.bom.cdx.json`;

	build.to.kver = "unknown";
	let bom = dl_bom();
	for (let comp in bom && bom.components) {
		if (comp.name == "kernel") {
			build.to.kver = comp.version;
			break;
		}
	}

	collect_packages();
}

//------------------------------------------------------------------------------

function dump()
{
	// Send forth a json representation of all the stuff we've collected.
	L.log(0, '{\n');
	L.log(0, '"options": %.4J,\n', options);
	L.log(0, '"url": %.4J,\n', sort(url));
	L.log(0, '"tmp": %.4J,\n', sort(tmp));
	L.log(0, '"build": %.4J,\n', build);
	L.log(0, '"device": %.4J,\n', device);
	L.log(0, '"release": %.4J,\n', release);
	L.log(1, '"packages": %.4J,\n', packages);
	L.log(1, '"packageDB": %.4J,\n', packageDB);
	L.log(0, '}\n');
}

function list()
{
	// Generate a list formatted for use with firmware-selector or
	// source build.
	let packages;
	switch (options.format) {
		case "config":
			packages = top_level(SrcType.USER_ONLY);
			let ctype = "y"; // "y" to install, "m" just build package.
			for (let pkg in packages) {
				L.log(0, "CONFIG_PACKAGE_%s=%s\n", pkg, ctype);
			}
			break;

		case "fs-all":
			packages = top_level(SrcType.ALL);
			L.log(0, "%s\n", join(" ", packages));
			break;

		case "fs-user":
		default:
			packages = top_level(SrcType.USER_ONLY);
			push(packages, ...map(removed_defaults(), (pkg) => "-"+pkg));
			L.log(0, "%s\n", join(" ", packages));
			break;
	}
}

function show_config()
{
	// Pretty-print the major configuration values.
	let downgrade = build.to.is_downgrade_from(build.from) ? L.colorize(L.RED, " DOWNGRADE") : "";
	L.log(0, 
		`Board-name     ${device.platform}\n`
		`Target         ${device.target}\n`
		`Root-FS-type   ${device.fstype}\n`
		`Sys-type       ${device.sutype}\n`
		`Package-arch   ${device.arch}\n`
		`Version-from   ${build.from.version} ${build.from.rev_code} (kernel ${build.from.kver})\n`
		`Version-to     ${build.to.version} ${build.to.rev_code} (kernel ${build.to.kver})${downgrade}\n`
		`Build-FS-type  ${build.to.fstype}\n`
		`Build-at       ${build.to.date}\n`
		`Image-prefix   ${build.to.img_prefix}\n`
		`Image-file     ${build.to.img_file}\n`
		`Image-URL      ${url.download}/${build.to.img_file}\n`
	);
	L.log(0, "Installed      %3d packages\n", length(packageDB));
	L.log(0, "Top-level      %3d packages\n", length(top_level(SrcType.ALL)));
	L.log(0, "Default        %3d packages\n", length(packages.default));
	L.log(0, "User-installed %3d packages (top-level only)\n", length(top_level(SrcType.USER_ONLY)));
	L.log(0, "\n");
}

function check_updates()
{
	// Scan the old and new package lists, return the number of changed
	// packages and the number of missing packages that would cause a
	// build failure.

	let changes = 0;
	let missing = 0;

	L.log(0, "Package version changes:\n");
	let w0 = max(...map(keys(packageDB), length));
	let w1 = max(...map(values(packageDB), (p) => length(p.version)));
	let f0 =`  %-${w0}s  %s%-${w1}s %s%s%s\n`;
	let new = '';
	for (let pkg, data in packageDB) {
		if (pkg in [ "kernel", "libc" ]) continue; // They aren't in 'available'?

		let old = data.version;
		let new = data.new_version;
		if (old == new) continue;

		changes++;
		let c1 = "";
		let c2 = "";
		if (old == null) {
			// This happens when you '--add' a new package.
			c1  = L.color(L.YELLOW);
			old = "not-installed";
		}
		if (new == null) {
			missing++;
			c2  = L.color(L.RED);
			new = "missing to-version";
		}
		else {
			c2  = L.color(pkg_ver_older(old, new) ? L.GREEN : L.YELLOW);
		}
		L.log(0, f0, pkg, c1, old, c2, new, L.color("reset"));
	}

	if (missing) {
		L.log(0, "%d packages missing in target version, %s\n", missing, L.colorize(L.RED, "DO NOT UPGRADE!"));
	}
	if (changes) {
		L.log(0, "%d packages are out-of-date.\n", changes);
	}
	else {
		L.log(0, "  All packages are up-to-date.\n");
	}
	L.log(0, "\n");

	return {
		missing: missing,
		changes: changes,
	};
}

function check_defaults()
{
	// Scan the package defaults to see if they are
	//    1) missing from the installation or
	//    2) modified/replaced by some other package.

	let changes = {};
	for (let pkg in packages.default) {
		// Without 'what_provides' from the package manager, we can no
		// longer tell what is replaced-by...
		if (! is_installed(pkg)) {
			changes[pkg] = L.colorize(L.YELLOW, "not installed, possibly replaced by another package");
		}
	}

	L.log(0, "Default package analysis:\n");
	if (length(changes) == 0) {
		L.log(0, "  No missing or modified default packages.\n\n");
	}
	else {
		let wid = max(...map(keys(changes), (f) => length(f)));
		let fmt = `  %-${wid}s   %s\n`;
		L.log(0, fmt, "Default", "Provided-by");
		for (let p, a in changes) {
			L.log(0, fmt, p, a);
		}
		L.log(0, "\n");
	}
}

function check_pkg_builds()
{
	// Scraping the failures.html is a total hack.
	// Let me know if you have an API on downloads (or other build site)
	// that can give this info.
	//
	// The lines we're scraping look like:
	//    <tr><td class="n"><a href="gummiboot/">gummiboot</a>/</td><td class="s">-</td><td class="d">Tue Apr 23 07:05:36 2024</td></tr>

	let info = regexp(
		'<td class="n"><a href="[^<]*">([^<]*)</a>/</td>' +
		'<td class="s">[^<]*</td>' +
		'<td class="d">([^<]*)</td>',
		'g'
	);

	let failed = false;

	let html_blob = dl_failures();
	let feeds = map(match(html_blob, info), (f) => f[1]);
	if (! html_blob || ! feeds) {
		L.log(0, "No package build failures found for %s %s.\n\n", build.to.version, device.arch);
	}
	else {
		L.log(0, "There are currently package build failures for %s %s:\n", build.to.version, device.arch);

		for (let feed in feeds) {
			L.log(0, "  Feed: %s\n", feed);
			html_blob = dl_failures(feed);
			if (html_blob) {
				let fails = match(html_blob, info);
				let w0    = max(...map(fails, (f) => max(25, length(f[1])) ));
				let fmt   = `    %-${w0}s  %s - %s\n`;

				for (let fail in fails) {
					let pkg  = fail[1];
					let date = fail[2];
					let msg;
					if (is_installed(pkg)) {
						failed = true;
						msg = L.colorize(L.RED, "Package installed locally, DO NOT UPGRADE!");
					}
					else {
						msg = "Package not installed locally";
					}
					L.log(0, fmt, pkg, date, msg);
				}
			}
		}

		let prefix = failed ?
			L.colorize(L.RED,   "NOTE THE ERRORS ABOVE:") :
			L.colorize(L.GREEN, "Failures don't affect this device,");
		L.log(0, "%s details at\n  %s\n\n", prefix, url.failed);
	}

	return ! failed;
}

function blob(report)
{
	// Exclude default packages unless explicitly listed in 'packages'.  When
	// moving between releases, default packages may be added, deleted or
	// renamed, which can result in bricks if something important is missed.
	//
	// On the other hand, what if we replace a default package, say,
	// 'dnsmasq' with 'dnsmasq-full'?  Then we must use the full top-level
	// list, plus target version defaults, and set this value 'true'.
	//
	// False is the safer option, so that's our default value.
	let contains_defaults = true;

	let log_level = report ? 0 : 1;

	let build_list = top_level(SrcType.ALL); // should be '! contains_defaults' - but not really...

	let init_script;
	if (options.init_script) {
		let inits_maxlen = 20480;  // See https://sysupgrade.openwrt.org/ui/#model-BuildRequest
		let inits_file   = options.init_script == "-" ? fs.stdin : fs.open(options.init_script);
		if (! inits_file) {
			L.err("init script file '%s' does not exist\n", options.init_script);
			return null;
		}
		else {
			init_script = inits_file.read("all");
			inits_file.close();
			if (length(init_script) > inits_maxlen) {
				L.err("'%s' is over the %s byte maximum\n", options.init_script, inits_maxlen);
				return null;
			}
		}
	}

	if (build.to.fstype != device.fstype) {
		L.log(log_level, "Build: Change file system type from '%s' to '%s'\n", device.fstype, build.to.fstype);
	}

	let blob = {
		client:        "owut/" + VERSION,
		target:        device.target,
		profile:       device.platform,  // sanitized board name

		version:       build.to.version,
		version_code:  build.to.rev_code,
		filesystem:    build.to.fstype,

		diff_packages: contains_defaults,
		packages:      build_list,
	};

	if (options.rootfs_size) {
		blob.rootfs_size_mb = options.rootfs_size;
		L.log(log_level, "Build: ROOTFS_PARTSIZE set to %d MB\n", options.rootfs_size);
	}

	if (init_script) {
		blob.defaults = init_script;
		L.log(log_level, "Build: Included init script '%s' (%d bytes) in build request\n", options.init_script, length(init_script));
	}

	return blob;
}

function json_blob()
{
	let b = blob(true);
	return b ? sprintf("%J", b) : null;
}

function show_blob()
{
	let b = blob();
	if (b) {
		L.log(0, "%.4J\n", b);
	}
}

function select_image(images)
{
	for (let image in images) {
		if (image.filesystem == build.to.fstype && image.type == device.sutype) {
			return image;
		}
	}
	return null;
}

function verify_image()
{
	// Verify the image with both the saved sha256sum and by passing it
	// to 'sysupgrade --test'.
	//
	// Failed images will be delete, unless '--keep' is set.

	let image = options.image;

	if (! fs.access(image)) {
		L.err("image file '%s' does not exist\n", image);
		return false;
	}

	let info = fs.stat(image);
	L.log(0, "Verifying   : %s (%d bytes) against %s\n", image, info.size, tmp.firmware_sums);

	let result = sha256.verify();
	if (result?.code == 0) {
		L.log(0, "  Saved sha256 matches\n");
	}
	else {
		let file_sha = sha256.sum(image);
		let expected = sha256.saved_sum();
		L.err(`sha256 doesn't match:\n`
		    `    calculated '${file_sha}'\n`
		    `    saved      '${expected}'\n`);
		if (! options.keep) {
			fs.unlink(image);
		}
		return false;
	}

	result = sysupgrade(image, ["--test"]);
	if (result?.code == 0) {
		L.log(0, "  %s\n", join("\n  ", split(trim(result.stderr), "\n")));
	}
	else {
		L.err("sysupgrade validation failed:\n");
		if (result.stdout) L.log(0, "stdout =\n%s\n", result.stdout);
		if (result.stderr) L.log(0, "stderr =\n%s\n", result.stderr);
		if (! options.keep) {
			fs.unlink(image);
		}
		return false;
	}

	L.log(0, "Checks complete, image is valid.\n");
	return true;
}

function download()
{
	// Use the json_blob to create a build request, run the request and
	// download the result.
	//
	// On success, return true, otherwise spew all sorts of stuff and
	// return false.
	//
	// To download the built image:
	// https://github.com/openwrt/luci/blob/master/applications/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/attendedsysupgrade/overview.js#L108

	let blob = json_blob();
	if (! blob) return false;

	let start    = time();
	let response = dl_build(blob);
	L.log(0, "\nRequesting build ----------------------\n");

	let hash = response?.request_hash;
	if (hash) {
		L.log(0, "Hash:   %s\n", hash);
		url.build_status = `${url.build}/${hash}`;
	}

	let queries = 0;
	let errors  = 0;
	while (response && !errors) {
		let status = response.status;

		L.log(0, "Status: %d\n", status);
		L.log(0, "Detail: %s", substr(response.detail, 0, 6) == "Error:" ? L.colorize(L.RED, response.detail) : response.detail);
		switch (response.detail) {
			case "queued":
				L.log(0, " - %d ahead of you", response.queue_position);
				break;
			case "started":
				L.log(0, " - %s", response.imagebuilder_status ?? "setup");
				break;
			default:
				break;
		}
		L.log(0, "\n");

		switch (status) {
			case 202: // Build in-progress, check in after 10 seconds.
				sleep(10000);
				queries++;
				L.log(0, "\nProgress %3d (%4ds) -----------------------------\n", queries, time()-start);
				response = dl_build_status();
				break;

			case 200: // All done.
				L.log(0, "\nBuild completed in %d seconds.\n", time()-start);
				L.log(1, "  build_at       = %s\n", response.build_at);
				L.log(1, "  version_number = %s\n", response.version_number);
				L.log(1, "  version_code   = %s\n", response.version_code);
				L.log(0, "  rootfs_size_mb = %s\n", response.request.rootfs_size_mb || "default");
				L.log(0, "  init-script    = %s\n", response.request.defaults ? options.init_script : "no-init-script");
				L.log(2, "  images = %.4J\n",       response.images);
				L.log(3, "  build_cmd = %.4J\n",    response.build_cmd);
				L.log(3, "  manifest = %.4J\n",     response.manifest);
				L.log(0, "\n");

				let image = select_image(response.images);
				if (! image) {
					L.err("Could not locate an image for '%s' and '%s'...\n", build.to.fstype, device.sutype);
					return false;
				}

				let sha = image.sha256;  // LuCI-ASU uses sha256_unsigned for something...
				let dir = response.bin_dir;
				let bin = `${url.store_root}/${dir}`;
				let img = `${bin}/${image.name}`;
				let dst = options.image;

				L.log(0, "Image source: %s\n", img);
				L.log(0, "Image saved : %s\n", dst);

				let msg = `couldn't download image ${image.name}`;
				let rsp = _request(img, dst, msg);
				if (rsp?.status != 200) {
					// need more output here, if 404 or whatever
					return false;
				}

				let manifest = response.manifest;
				let manifest_file = fs.open(tmp.firmware_man, "w");
				if (manifest_file) {
					manifest_file.write(sprintf("%.4J\n", manifest));
					manifest_file.close();
					L.log(0, "Manifest    : %s\n", tmp.firmware_man);
				}

				// Validate manifest against request.
				if (response.version_code != build.to.rev_code) {
					L.err("Firmware revision mismatch: expected %s, but got %s\n",
						build.to.rev_code, response.version_code);
					errors++;
				}
				for (let pkg in top_level(SrcType.ALL)) {
					if (! (pkg in manifest)) {
						L.err("Firmware missing requested package: '%s'\n", pkg);
						errors++;
						continue;
					}

					let expected_version = packageDB[pkg].new_version;
					let received_version = manifest[pkg];
					if (received_version != expected_version) {
						L.err("Firmware package version mismatch: '%s', expected %s, but got %s\n",
							pkg, expected_version, received_version);
						errors++;
						continue;
					}
				}
				if (! errors) {
					sha256.save(sha);
					return verify_image();
				}
				break;

			// Everything else is "failure - we're done" cases.
			case 400: // Invalid build request.
			case 422: // Unknown package.
			case 500: // Invalid build request.
			default:  // ???
				if (response.error ) L.log(0, "error  =\n%s\n", response.error);
				if (response.stdout) L.log(0, "stdout =\n%s\n", response.stdout);
				if (response.stderr) L.log(0, "stderr =\n%s\n", response.stderr);
				L.err("build failed with status %s\n", status);
				errors++;
				break;
		}
	}

	if (errors) {
		L.log(0, "The above errors are often due to the upgrade server lagging behind the\n" +
			 "build server, first suggestion is to wait a while and try again.\n");
	}
	return false;
}

function install()
{
	// Run sysupgrade to install the image.
	// Probably need some more options reflected from sysupgrade itself.
	// '-n' = discard config comes to mind first, maybe '-f' = force, too.

	sysupgrade(options.image);
}

//------------------------------------------------------------------------------

if (options.verbosity) {
	arg_defs.show_version();
}

ubus = mod_ubus.connect();
if (! ubus) {
	die(`Unable to connect to ubus: ${mod_ubus.error()}\n`);
}

if (! uloop.init()) {
	die(`Unable to initialize uloop: ${uloop.error()}\n`);
}

initialize_urls();

switch (options.command) {
	case "versions":
		collect_overview();
		show_versions(false);
		break;

	case "dump":
		collect_all();
		dump();
		break;

	case "list":
		collect_all();
		list();
		break;

	case "check":
		collect_all();
		show_config();
		check_updates();
		check_defaults();
		check_pkg_builds();
		break;

	case "blob":
		collect_all();
		show_blob();
		break;

	case "download":
	case "upgrade":
		collect_all();
		show_config();
		let updates = check_updates();
		if (updates.missing) {
			L.err("update checks reveal errors, can't proceed\n");
			break;
		}
		check_defaults();
		if (! check_pkg_builds()) {
			L.err("package build checks reveal errors, can't proceed\n");
			break;
		}
		if (updates.changes == 0) {
			if (options.force)
				L.wrn("Forcing build with no changes.\n");
			else {
				L.log(0, "There are no changes to %s (see '--force').\n", options.command);
				break;
			}
		}
		if (download() && options.command == "upgrade") {
			install();
		}
		break;
	
	case "install":
		if (verify_image()) {
			install();
		}
		break;

	case "verify":
		verify_image();
		break;

	default:
		L.err("'%s' not implemented yet.\n", options.command);
		break;
}

uloop.done();
ubus.disconnect();
_exit();
